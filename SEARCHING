import sys

class Node():
    def _init_(self,state,parent,action):
        self.state= state
        self.parent=parent
        self.action= action

class StackFrontier():
    def _init_(self):
        self.frontier= []
    
    def add(self,node):
        self.frontier.append(node)

    def contains_state(self,state):
        return any(node.state ==state for node in self.frontier)
    
    def empty(self):
        return len(self.frontier)== 0
    
    def remove(self):
        if self.empty():
            raise Exception("empty frontier")
        else:
            node=self.frontier[-1]
            self.frontier=self.frontier[:-1]
            return node
        
class QueueFrontier(StackFrontier):

    def remove(self):
        if self.empty():
            raise Exception("empty frontier")
        else:
            node=self.frontier[0]
            self.frontier=self.frontier[1:]
            return node
        

class Maze():
    def _init_(self,filename):
        with open(filename) as f:
            contents=f.read()
        if contents.count("A")!= 1:
            raise Exception("maze must have one start point")
        if contents.count("B") !=1:
            raise Exception("maze must have one end point")
        
        contents = contents.splitlines()
        self.height=len(contents)
        self.width = max(len(line) for line in contents)

        self.walls= []
        for i in range(self.height):
            row=[]
            for i in range(self.width):
                try:
                    if contents[i][j]=="A":
                        self.start=(i,j)
                        row.append(False)
                    elif contents[i][j]=="B":
                        self.goal=(i,j)
                        row.append(False)
                    elif contents[i][j]=" ":
                        row.append(False)
                    else:
                        row.append(True)
                except IndexError:
                    row.append(False)
            self.walls.append(row)
        self.solution= None

